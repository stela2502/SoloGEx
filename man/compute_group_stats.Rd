% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/SoloGEx.R
\name{compute_group_stats}
\alias{compute_group_stats}
\alias{compute_group_stats,SoloGEx-method}
\title{Compute per-gene, per-group statistics for a SoloGEx object}
\usage{
compute_group_stats(edat, group_col)

\S4method{compute_group_stats}{SoloGEx}(edat, group_col)
}
\arguments{
\item{edat}{A \code{SoloGEx} S4 object containing the expression matrix
in the \code{expr} slot and sample metadata in the \code{colData} slot.}

\item{group_col}{A character string specifying the column name in
\code{colData} that identifies the biological groups.}
}
\value{
A \code{SoloGEx} object with the \code{group_stats} slot filled.
  The \code{group_stats} matrix has \code{genes x 3*groups} dimensions,
  with columns for each group: \code{<GroupName>_mean}, \code{<GroupName>_sd},
  \code{<GroupName>_cv}.
}
\description{
This function calculates the mean, standard deviation (SD), and
coefficient of variation (CV = SD / mean) for each gene across
replicates within each biological group of a reference dataset.
}
\details{
Each row corresponds to a gene.  
For each group:
\describe{
  \item{\code{<GroupName>_mean}}{ — mean expression across replicates}
  \item{\code{<GroupName>_sd}}{ — standard deviation across replicates}
  \item{\code{<GroupName>_cv}}{ — coefficient of variation (SD / mean)}
}

Interpretation:
\describe{
  \item{Low CV indicates a gene is stable across replicates in this group.}
  \item{High CV indicates a gene is noisy; such genes should be interpreted
        with caution in downstream analyses.}
}
}
\section{Functions}{
\itemize{
\item \code{compute_group_stats(SoloGEx)}: Method for SoloGEx objects

}}
\examples{
# Create a mock SoloGEx object
expr <- matrix(rnorm(12), nrow = 3, dimnames = list(paste0("Gene",1:3),
                                                    paste0("S",1:4)))
colData <- data.frame(SampleID = paste0("S",1:4),
                      BiologicalGroup = c("A","A","B","B"))
edat <- SoloGEx(expr, colData)
group_stats <- compute_group_stats(edat, group_col = "BiologicalGroup")
head(group_stats)

}
